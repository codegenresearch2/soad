import asyncio\"nimport yaml\"nimport os\"nimport importlib.util\"nfrom brokers.tradier_broker import TradierBroker\"nfrom brokers.tastytrade_broker import TastytradeBroker\"nfrom brokers.alpaca_broker import AlpacaBroker\"nfrom brokers.kraken_broker import KrakenBroker\"nfrom database.models import init_db\"nfrom database.db_manager import DBManager\"nfrom sqlalchemy.ext.asyncio import create_async_engine\"nfrom sqlalchemy import create_engine\"nfrom strategies.constant_percentage_strategy import ConstantPercentageStrategy\"nfrom strategies.random_yolo_hedge_strategy import RandomYoloHedge\"nfrom strategies.black_swan_strategy import BlackSwanStrategy\"nfrom strategies.simple_strategy import SimpleStrategy\"nfrom .logger import logger\"n\"n# Constants for configurable values\"nBROKER_MAP = {\"tradier": lambda config, engine: TradierBroker(\"api_key=os.environ.get('TRADIER_API_KEY', config.get('api_key'))\", secret_key=None, engine=engine, prevent_day_trading=config.get('prevent_day_trading', False)),\"tastytrade": lambda config, engine: TastytradeBroker(\"username=os.environ.get('TASTYTRADE_USERNAME', config.get('username'))\", password=os.environ.get('TASTYTRADE_PASSWORD', config.get('password'))), engine=engine, prevent_day_trading=config.get('prevent_day_trading', False)),\"alpaca": lambda config, engine: AlpacaBroker(\"api_key=os.environ.get('ALPACA_API_KEY', config.get('api_key'))\", secret_key=os.environ.get('ALPACA_SECRET_KEY', config.get('secret_key'))), engine=engine, prevent_day_trading=config.get('prevent_day_trading', False)),\"kraken": lambda config, engine: KrakenBroker(\"api_key=os.environ.get('KRAKEN_API_KEY', config.get('api_key'))\", secret_key=os.environ.get('KRAKEN_SECRET_KEY', config.get('secret_key'))), engine=engine))\"nSTRATEGY_MAP = {\"constant_percentage": lambda broker, strategy_name, config: ConstantPercentageStrategy(broker=broker, strategy_name=strategy_name, stock_allocations=config['stock_allocations'], cash_percentage=config['cash_percentage'], rebalance_interval_minutes=config['rebalance_interval_minutes'], starting_capital=config['starting_capital'], buffer=config.get('rebalance_buffer', 0.1)),\"random_yolo_hedge": lambda broker, strategy_name, config: RandomYoloHedge(broker=broker, strategy_name=strategy_name, rebalance_interval_minutes=config['rebalance_interval_minutes'], starting_capital=config['starting_capital'], max_spread_percentage=config.get('max_spread_percentage', 0.25), bet_percentage=config.get('bet_percentage', 0.2)),\"simple": lambda broker, strategy_name, config: SimpleStrategy(broker=broker, buy_threshold=config.get('buy_threshold', 0), sell_threshold=config.get('sell_threshold', 0)),\"black_swan": lambda broker, strategy_name, config: BlackSwanStrategy(broker=broker, strategy_name=strategy_name, rebalance_interval_minutes=config['rebalance_interval_minutes'], starting_capital=config['starting_capital'], symbol=config.get('symbol', 'SPY'), otm_percentage=config.get('otm_percentage', 0.05), expiry_days=config.get('expiry_days', 30), bet_percentage=config.get('bet_percentage', 0.1), holding_period_days=config.get('holding_period_days', 14), spike_percentage=config.get('spike_percentage', 500)),\"custom": lambda broker, strategy_name, config: load_custom_strategy(broker, strategy_name, config))\"n\"n# Function to load a custom strategy class\"ndef load_strategy_class(file_path, class_name):\"n    logger.info(f"Attempting to load strategy class '{class_name}' from file '{file_path}'")\"n    try:\"n        spec = importlib.util.spec_from_file_location(class_name, file_path)\"n        module = importlib.util.module_from_spec(spec)\"n        spec.loader.exec_module(module)\"n        strategy_class = getattr(module, class_name)\"n        logger.info(f"Successfully loaded strategy class '{class_name}' from file '{file_path}'")\"n        return strategy_class\"n    except Exception as e:\"n        logger.error(f"Failed to load strategy class '{class_name}' from file '{file_path}': {e}")\"n        raise\"n\"n# Function to load a custom strategy\"ndef load_custom_strategy(broker, strategy_name, config):\"n    try:\"n        file_path = config['file_path']\"n        class_name = config['class_name']\"n        starting_capital = config['starting_capital']\"n        rebalance_interval_minutes = config['rebalance_interval_minutes']\"n        strategy_class = load_strategy_class(file_path, class_name)\"n        logger.info(f"Initializing custom strategy '{class_name}' with config: {config}")\"n        return strategy_class(broker, strategy_name, starting_capital, rebalance_interval_minutes, execution_style, **config.get('strategy_params', {}))\"n    except Exception as e:\"n        logger.error(f"Error initializing custom strategy '{config['class_name']}': {e}")\"n        raise\"n\"n# Function to parse a YAML configuration file\"ndef parse_config(config_path):\"n    with open(config_path, 'r') as file:\"n        config = yaml.safe_load(file)\"n    return config\"n\"n# Function to initialize brokers\"ndef initialize_brokers(config):\"n    # Create a single database engine for all brokers\"n    if 'database' in config and 'url' in config['database']:\"n        engine = create_async_engine(config['database']['url'])\"n    elif os.environ.get("DATABASE_URL", None):\"n        engine = create_async_engine(os.environ.get("DATABASE_URL"))\"n    else:\"n        engine = create_async_engine('sqlite+aiosqlite:///default_trading_system.db')\"n\"n    brokers = {}\"n    for broker_name, broker_config in config['brokers'].items():\"n        try:\"n            # Initialize the broker with the shared engine\"n            logger.debug(f"Initializing broker '{broker_name}' with config: {broker_config}")\"n            brokers[broker_name] = BROKER_MAP[broker_name](broker_config, engine)\"n        except Exception as e:\"n            logger.error(f"Error initializing broker '{broker_name}': {e}")\"n            continue\"n\"n    return brokers\"n\"n# Async function to initialize a strategy\"nasync def initialize_strategy(strategy_name, strategy_type, broker, config):\"n    constructor = STRATEGY_MAP.get(strategy_type)\"n    if constructor is None:\"n        raise ValueError(f"Unknown strategy type: {strategy_type}")\"n    strategy = constructor(broker, strategy_name, config)\"n    if asyncio.iscoroutinefunction(strategy.initialize):\"n        await strategy.initialize()\"n        return strategy\"n    elif callable(strategy.initialize):\"n        strategy.initialize()\"n        return strategy\"n    else:\"n        return strategy\"n\"n# Async function to initialize strategies\"nasync def initialize_strategies(brokers, config):\"n    strategies_config = config['strategies']\"n    strategies = {}\"n    for strategy_name in strategies_config:\"n        try:\"n            strategy_config = strategies_config[strategy_name]\"n            strategy_type = strategy_config['type']\"n            broker_name = strategy_config['broker']\"n            broker = brokers[broker_name]\"n            if strategy_type in STRATEGY_MAP:\"n                strategy = await initialize_strategy(strategy_name, strategy_type, broker, strategy_config)\"n                strategies[strategy_name]= strategy\"n            else:\"n                logger.error(f"Unknown strategy type: {strategy_type}")\"n        except Exception as e:\"n            logger.error(f"Error initializing strategy '{strategy_name}': {e}")\"n    return strategies\"n\"n# Function to create an API database engine\"ndef create_api_database_engine(config, local_testing=False):\"n    if local_testing:\"n        return create_engine('sqlite:///trading.db')\"n    if 'database' in config and 'url' in config['database']:\"n        return create_engine(config['database']['url'])\"n    return create_engine(os.environ.get("DATABASE_URL", 'sqlite:///default_trading_system.db'))\"n\"n# Function to create a database engine\"ndef create_database_engine(config, local_testing=False):\"n    if local_testing:\"n        return create_async_engine('sqlite+aiosqlite:///trading.db')\"n    if type(config) == str:\"n        return create_async_engine(config)\"n    if 'database' in config and 'url' in config['database']:\"n        return create_async_engine(config['database']['url'])\"n    return create_async_engine(os.environ.get("DATABASE_URL", 'sqlite+aiosqlite:///default_trading_system.db'))\"n\"n# Async function to initialize the database\"nasync def initialize_database(engine):\"n    try:\"n        await init_db(engine)\"n        logger.info('Database initialized successfully')\"n    except Exception as e:\"n        logger.error('Failed to initialize database', extra={'error': str(e)}, exc_info=True)\"n        raise\"n\"n# Async function to initialize system components\"nasync def initialize_system_components(config):\"n    try:\"n        brokers = initialize_brokers(config)\"n        logger.info('Brokers initialized successfully')\"n        strategies = await initialize_strategies(brokers, config)\"n        logger.info('Strategies initialized successfully')\"n        return brokers, strategies\"n    except Exception as e:\"n        logger.error('Failed to initialize system components', extra={'error': str(e)}, exc_info=True)\"n        raise\"n\"n# Async function to initialize brokers and strategies\"nasync def initialize_brokers_and_strategies(config):\"n    engine = create_database_engine(config)\"n    if config.get('rename_strategies'):\"n        for strategy in config['rename_strategies']:\"n            try:\"n                DBManager(engine).rename_strategy(strategy['broker'], strategy['old_strategy_name'], strategy['new_strategy_name'])\"n            except Exception as e:\"n                logger.error('Failed to rename strategy', extra={'error': str(e), 'renameStrategyConfig': strategy}, exc_info=True)\"n                raise\"n\"n    # Initialize the brokers and strategies\"n    try:\"n        brokers, strategies = await initialize_system_components(config)\"n    except Exception as e:\"n        logger.error('Failed to initialize brokers', extra={'error': str(e)}, exc_info=True)\"n        return\"n\"n    # Initialize the strategies\"n    try:\"n        strategies = await initialize_strategies(brokers, config)\"n        logger.info('Strategies initialized successfully')\"n    except Exception as e:\"n        logger.error('Failed to initialize strategies', extra={'error': str(e)}, exc_info=True)\"n        return\"n    return brokers, strategies\"