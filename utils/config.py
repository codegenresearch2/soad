import asyncio\"import yaml\"import os\"import importlib.util\"from brokers.tradier_broker import TradierBroker\"from brokers.tastytrade_broker import TastytradeBroker\"from brokers.alpaca_broker import AlpacaBroker\"from brokers.kraken_broker import KrakenBroker\"from database.models import init_db\"from database.db_manager import DBManager\"from sqlalchemy.ext.asyncio import create_async_engine\"from sqlalchemy import create_engine\"from strategies.constant_percentage_strategy import ConstantPercentageStrategy\"from strategies.random_yolo_hedge_strategy import RandomYoloHedge\"from strategies.black_swan_strategy import BlackSwanStrategy\"from strategies.simple_strategy import SimpleStrategy\"from .logger import logger\"\n\n# Mapping of broker types to their constructors\n# TODO: refactor\nBROKER_MAP = {\"tradier": lambda config, engine: TradierBroker(\"api_key=os.environ.get('TRADIER_API_KEY', config.get('api_key')), secret_key=None, engine=engine, prevent_day_trading=config.get('prevent_day_trading', False))\"\n    'tastytrade': lambda config, engine: TastytradeBroker(\"username=os.environ.get('TASTYTRADE_USERNAME', config.get('username')), password=os.environ.get('TASTYTRADE_PASSWORD', config.get('password')), engine=engine, prevent_day_trading=config.get('prevent_day_trading', False))\"\n    'alpaca': lambda config, engine: AlpacaBroker(\"api_key=os.environ.get('ALPACA_API_KEY', config.get('api_key')), secret_key=os.environ.get('ALPACA_SECRET_KEY', config.get('secret_key')), engine=engine, prevent_day_trading=config.get('prevent_day_trading', False))\"\n    'kraken': lambda config, engine: KrakenBroker(\"api_key=os.environ.get('KRAKEN_API_KEY', config.get('api_key')), secret_key=os.environ.get('KRAKEN_SECRET_KEY', config.get('secret_key')), engine=engine)\"\n}\n\n# Mapping of strategy types to their constructors\nSTRATEGY_MAP = {\"constant_percentage": lambda broker, strategy_name, config: ConstantPercentageStrategy(\"broker=broker, strategy_name=strategy_name, stock_allocations=config['stock_allocations'], cash_percentage=config['cash_percentage'], rebalance_interval_minutes=config['rebalance_interval_minutes'], starting_capital=config['starting_capital'], buffer=config.get('rebalance_buffer', 0.1))\"\n    'random_yolo_hedge': lambda broker, strategy_name, config: RandomYoloHedge(\"broker=broker, strategy_name=strategy_name, rebalance_interval_minutes=config['rebalance_interval_minutes'], starting_capital=config['starting_capital'], max_spread_percentage=config.get('max_spread_percentage', 0.25), bet_percentage=config.get('bet_percentage', 0.2))\"\n    'simple': lambda broker, strategy_name, config: SimpleStrategy(\"broker=broker, buy_threshold=config.get('buy_threshold', 0), sell_threshold=config.get('sell_threshold', 0))\"\n    'black_swan': lambda broker, strategy_name, config: BlackSwanStrategy(\"broker=broker, strategy_name=strategy_name, rebalance_interval_minutes=config['rebalance_interval_minutes'], starting_capital=config['starting_capital'], symbol=config.get('symbol', 'SPY'), otm_percentage=config.get('otm_percentage', 0.05), expiry_days=config.get('expiry_days', 30), bet_percentage=config.get('bet_percentage', 0.1), holding_period_days=config.get('holding_period_days', 14), spike_percentage=config.get('spike_percentage', 500))\"\n    'custom': lambda broker, strategy_name, config: load_custom_strategy(broker, strategy_name, config)\"\n}\n\ndef load_strategy_class(file_path, class_name):\"""Attempting to load strategy class '{class_name}' from file '{file_path}'"""\n    try:\"""\n        spec = importlib.util.spec_from_file_location(class_name, file_path)\"""\n        module = importlib.util.module_from_spec(spec)\"""\n        spec.loader.exec_module(module)\"""\n        strategy_class = getattr(module, class_name)\"""\n        logger.info(f"Successfully loaded strategy class '{class_name}' from file '{file_path}'")\"""\n        return strategy_class\"""\n    except Exception as e:\"""\n        logger.error(f"Failed to load strategy class '{class_name}' from file '{file_path}': {e}")\"""\n        raise\"""\n\ndef load_custom_strategy(broker, strategy_name, config):\"""\n    try:\"""\n        file_path = config['file_path']\"""\n        class_name = config['class_name']\"""\n        starting_capital = config['starting_capital']\"""\n        rebalance_interval_minutes = config['rebalance_interval_minutes']\"""\n        strategy_class = load_strategy_class(file_path, class_name)\"""\n        logger.info(f"Initializing custom strategy '{class_name}' with config: {config}")\"""\n        return strategy_class(broker, strategy_name, starting_capital, rebalance_interval_minutes, execution_style, **config.get('strategy_params', {}))\"""\n    except Exception as e:\"""\n        logger.error(f"Error initializing custom strategy '{config['class_name']}': {e}")\"""\n        raise\"""\n\ndef parse_config(config_path):\"""\n    with open(config_path, 'r') as file:\"""\n        config = yaml.safe_load(file)\"""\n    return config\"""\n\n# Implement order cancellation logic here\n\n# Test order reconciliation thoroughly\n\n# Maintain consistent execution style handling.\n