import yaml\\\nimport importlib.util\\\\nfrom brokers.tradier_broker import TradierBroker\\\\nfrom brokers.tastytrade_broker import TastytradeBroker\\\\nfrom brokers.etrade_broker import EtradeBroker\\\\nfrom strategies.constant_percentage_strategy import ConstantPercentageStrategy\\\\nfrom sqlalchemy import create_engine\\\\\n\\\\n# Mapping of broker types to their constructors\\\\nBROKER_MAP = {\\\n    'tradier': lambda config, engine: TradierBroker(api_key=config.get('api_key', ''), secret_key=config.get('secret_key', None), engine=engine, prevent_day_trading=config.get('prevent_day_trading', False)),\\\\\n    'etrade': lambda config, engine: EtradeBroker(api_key=config.get('api_key', ''), secret_key=config.get('secret_key', ''), engine=engine, prevent_day_trading=config.get('prevent_day_trading', False)),\\\\\n    'tastytrade': lambda config, engine: TastytradeBroker(api_key=config.get('api_key', ''), secret_key=config.get('secret_key', ''), engine=engine, prevent_day_trading=config.get('prevent_day_trading', False))\\\\n}\\\\\n\\\\n# Mapping of strategy types to their constructors\\\\nSTRATEGY_MAP = {\\\n    'constant_percentage': lambda broker, config: ConstantPercentageStrategy(\\\n        broker=broker,\\\n        stock_allocations=config.get('stock_allocations', {}),\\\n        cash_percentage=config.get('cash_percentage', 0.0),\\\n        rebalance_interval_minutes=config.get('rebalance_interval_minutes', 60),\\\n        starting_capital=config.get('starting_capital', 0.0)\\\\n    ),\\\\\n    'custom': lambda broker, config: load_custom_strategy(broker, config)\\\\n}\\\\\n\\\\n\\\\ndef load_strategy_class(file_path, class_name):\\\\n    spec = importlib.util.spec_from_file_location(class_name, file_path)\\\\n    module = importlib.util.module_from_spec(spec)\\\\n    spec.loader.exec_module(module)\\\\n    strategy_class = getattr(module, class_name)\\\\n    return strategy_class\\\\n\\\\n\\\\ndef load_custom_strategy(broker, config):\\\\n    strategy_class = load_strategy_class(config.get('file', ''), config.get('className', ''))\\\\n    return strategy_class(\\\n        broker=broker,\\\n        stock_allocations=config.get('stock_allocations', {}),\\\n        cash_percentage=config.get('cash_percentage', 0.0),\\\n        rebalance_interval_minutes=config.get('rebalance_interval_minutes', 60),\\\n        starting_capital=config.get('starting_capital', 0.0)\\\\n    )\\\\n\\\\n\\\\ndef parse_config(config_path):\\\\n    with open(config_path, 'r') as file:\\\\n        config = yaml.safe_load(file)\\\\n    return config\\\\n\\\\n\\\\ndef initialize_brokers(config):\\\\n    # Create a single database engine for all brokers\\\\n    engine = create_engine(config.get('database', {}).get('url', 'sqlite:///default_trading_system.db'))\\\\n    \\\\n    brokers = {}\\\\n    for broker_name, broker_config in config.get('brokers', {}).items():\\\\n        \\\\n        # Initialize the broker with the shared engine and prevent_day_trading parameter\\\\n        brokers[broker_name] = BROKER_MAP[broker_name](broker_config, engine, prevent_day_trading=True)\\\\n    \\\\n    return brokers\\\\n\\\\n\\\\ndef initialize_strategies(brokers, config):\\\\n    strategies_config = config.get('strategies', [])\\\\n    strategies = []\\\\n    for strategy_config in strategies_config:\\\\n        strategy_type = strategy_config.get('type', '')\\\\n        broker_name = strategy_config.get('broker', '')\\\\n        broker = brokers.get(broker_name, None)\\\\n        if broker and strategy_type in STRATEGY_MAP:\\\\n            strategies.append(STRATEGY_MAP[strategy_type](broker, strategy_config))\\\\n        else:\\\\n            raise ValueError(f"Unsupported strategy type: {strategy_type}")\\\\n    return strategies\\\\n