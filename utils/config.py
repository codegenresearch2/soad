import asyncio\"nimport yaml\"nimport os\"nimport importlib.util\"nfrom brokers.tradier_broker import TradierBroker\"nfrom brokers.tastytrade_broker import TastytradeBroker\"nfrom brokers.alpaca_broker import AlpacaBroker\"nfrom brokers.kraken_broker import KrakenBroker\"nfrom database.models import init_db\"nfrom database.db_manager import DBManager\"nfrom sqlalchemy.ext.asyncio import create_async_engine\"nfrom sqlalchemy import create_engine\"nfrom strategies.constant_percentage_strategy import ConstantPercentageStrategy\"nfrom strategies.random_yolo_hedge_strategy import RandomYoloHedge\"nfrom strategies.black_swan_strategy import BlackSwanStrategy\"nfrom strategies.simple_strategy import SimpleStrategy\"nfrom .logger import logger\"n\"n# Constants for configurable values\"nBROKER_MAP = {\"tradier": lambda config, engine: TradierBroker(\"api_key=os.environ.get('TRADIER_API_KEY', config.get('api_key'))\", secret_key=None, engine=engine, prevent_day_trading=config.get('prevent_day_trading', False)),\"tastytrade": lambda config, engine: TastytradeBroker(\"username=os.environ.get('TASTYTRADE_USERNAME', config.get('username'))\", password=os.environ.get('TASTYTRADE_PASSWORD', config.get('password'))\", engine=engine, prevent_day_trading=config.get('prevent_day_trading', False)),\"alpaca": lambda config, engine: AlpacaBroker(\"api_key=os.environ.get('ALPACA_API_KEY', config.get('api_key'))\", secret_key=os.environ.get('ALPACA_SECRET_KEY', config.get('secret_key'))\", engine=engine, prevent_day_trading=config.get('prevent_day_trading', False)),\"kraken": lambda config, engine: KrakenBroker(\"api_key=os.environ.get('KRAKEN_API_KEY', config.get('api_key'))\", secret_key=os.environ.get('KRAKEN_SECRET_KEY', config.get('secret_key'))\", engine=engine))\"nSTRATEGY_MAP = {\"constant_percentage": lambda broker, strategy_name, config: ConstantPercentageStrategy(broker=broker, strategy_name=strategy_name, stock_allocations=config['stock_allocations'], cash_percentage=config['cash_percentage'], rebalance_interval_minutes=config['rebalance_interval_minutes'], starting_capital=config['starting_capital'], buffer=config.get('rebalance_buffer', 0.1)),\"random_yolo_hedge": lambda broker, strategy_name, config: RandomYoloHedge(broker=broker, strategy_name=strategy_name, rebalance_interval_minutes=config['rebalance_interval_minutes'], starting_capital=config['starting_capital'], max_spread_percentage=config.get('max_spread_percentage', 0.25), bet_percentage=config.get('bet_percentage', 0.2)),\"simple": lambda broker, strategy_name, config: SimpleStrategy(broker=broker, buy_threshold=config.get('buy_threshold', 0), sell_threshold=config.get('sell_threshold', 0)),\"black_swan": lambda broker, strategy_name, config: BlackSwanStrategy(broker=broker, strategy_name=strategy_name, rebalance_interval_minutes=config['rebalance_interval_minutes'], starting_capital=config['starting_capital'], symbol=config.get('symbol', 'SPY'), otm_percentage=config.get('otm_percentage', 0.05), expiry_days=config.get('expiry_days', 30), bet_percentage=config.get('bet_percentage', 0.1), holding_period_days=config.get('holding_period_days', 14), spike_percentage=config.get('spike_percentage', 500)),\"custom": lambda broker, strategy_name, config: load_custom_strategy(broker, strategy_name, config))\"n\"n# Function to load a custom strategy class\"ndef load_strategy_class(file_path, class_name):\"n    logger.info(f"Attempting to load strategy class '{class_name}' from file '{file_path}'")\"n    try:\"n        spec = importlib.util.spec_from_file_location(class_name, file_path)\"n        module = importlib.util.module_from_spec(spec)\"n        spec.loader.exec_module(module)\"n        strategy_class = getattr(module, class_name)\"n        logger.info(f"Successfully loaded strategy class '{class_name}' from file '{file_path}'")\"n        return strategy_class\"n    except Exception as e:\"n        logger.error(f"Failed to load strategy class '{class_name}' from file '{file_path}': {e}")\"n        raise\"n\"n# Function to load a custom strategy\"ndef load_custom_strategy(broker, strategy_name, config):\"n    try:\"n        file_path = config['file_path']\"n        class_name = config['class_name']\"n        strategy_class = load_strategy_class(file_path, class_name)\"n        logger.info(f"Initializing custom strategy '{class_name}' with config: {config}")\"n        return strategy_class(broker, strategy_name, config['starting_capital'], config['rebalance_interval_minutes'], **config.get('strategy_params', {}))\"n    except Exception as e:\"n        logger.error(f"Error initializing custom strategy '{config['class_name']}': {e}")\"n        raise\"n\"n# Function to parse a YAML configuration file\"ndef parse_config(config_path):\"n    with open(config_path, 'r') as file:\"n        config = yaml.safe_load(file)\"n    return config\"n\"n# Function to initialize brokers\"n# This function initializes brokers using the BROKER_MAP and returns a dictionary of brokers\"n# It also creates a single database engine for all brokers\"n# This is a placeholder for the actual implementation\"n\"n# Function to initialize a strategy\"n# This function initializes a strategy using the STRATEGY_MAP\"n# It returns the initialized strategy\"n\"n# Function to create an API database engine\"n# This function creates an SQLAlchemy engine for the API server\"n\"n# Function to create a database engine\"n# This function creates an SQLAlchemy engine for the trading system\"n\"n# Function to initialize the database\"n# This function initializes the database using the provided engine\"n\"n# Function to initialize system components\"n# This function initializes brokers and strategies\"n\"n# Function to initialize brokers and strategies\"n# This function initializes the brokers and strategies using the initialize_system_components function\"n