import yaml\\\nimport importlib.util\\\\nfrom brokers.tradier_broker import TradierBroker\\\\nfrom brokers.tastytrade_broker import TastytradeBroker\\\\nfrom brokers.etrade_broker import EtradeBroker\\\\nfrom strategies.constant_percentage_strategy import ConstantPercentageStrategy\\\\nfrom sqlalchemy import create_engine\\\\n\\\n# Mapping of broker types to their constructors\\\\nBROKER_MAP = {\\"tradier\": lambda config, engine: TradierBroker(api_key=config['api_key'], secret_key=None, engine=engine, prevent_day_trading=config.get('prevent_day_trading', False)),\\"etrade\": lambda config, engine: EtradeBroker(api_key=config['api_key'], secret_key=config['secret_key'], engine=engine, prevent_day_trading=config.get('prevent_day_trading', False)),\\"tastytrade\": lambda config, engine: TastytradeBroker(api_key=config['api_key'], secret_key=config['secret_key'], engine=engine, prevent_day_trading=config.get('prevent_day_trading', False))}\\\\n\\\n# Mapping of strategy types to their constructors\\\\nSTRATEGY_MAP = {\\"constant_percentage\": lambda broker, config: ConstantPercentageStrategy(\\\n        broker=broker,\\\n        stock_allocations=config['stock_allocations'],\\\n        cash_percentage=config['cash_percentage'],\\\n        rebalance_interval_minutes=config['rebalance_interval_minutes'],\\\n        starting_capital=config['starting_capital'],\\\n        prevent_day_trading=config.get('prevent_day_trading', False)\\\n    ),\\"custom\": lambda broker, config: load_custom_strategy(broker, config)}\\\\n\\\n\\\ndef load_strategy_class(file_path, class_name):\\\n    spec = importlib.util.spec_from_file_location(class_name, file_path)\\\n    module = importlib.util.module_from_spec(spec)\\\n    spec.loader.exec_module(module)\\\n    strategy_class = getattr(module, class_name)\\\n    return strategy_class\\\n\\\n\\\ndef load_custom_strategy(broker, config):\\\n    strategy_class = load_strategy_class(config['file'], config['className'])\\\n    return strategy_class(\\\n        broker=broker,\\\n        stock_allocations=config['stock_allocations'],\\\n        cash_percentage=config['cash_percentage'],\\\n        rebalance_interval_minutes=config['rebalance_interval_minutes'],\\\n        starting_capital=config['starting_capital'],\\\n        prevent_day_trading=config.get('prevent_day_trading', False)\\\n    )\\\n\\\n\\\ndef parse_config(config_path):\\\n    with open(config_path, 'r') as file:\\\n        config = yaml.safe_load(file)\\\n    return config\\\n\\\n\\\ndef initialize_brokers(config):\\\n    # Create a single database engine for all brokers\\\n    if 'database' in config and 'url' in config['database']:\\\n        engine = create_engine(config['database']['url'])\\\n    else:\\\n        engine = create_engine('sqlite:///default_trading_system.db')\\\n    \\\n    brokers = {}\\\n    for broker_name, broker_config in config['brokers'].items():\\\n        \\\n        # Initialize the broker with the shared engine\\\n        brokers[broker_name] = BROKER_MAP[broker_name](broker_config, engine)\\\n    \\\n    return brokers\\\n\\\n\\\ndef initialize_strategies(brokers, config):\\\n    strategies_config = config['strategies']\\\n    strategies = []\\\n    for strategy_config in strategies_config:\\\n        strategy_type = strategy_config['type']\\\n        broker_name = strategy_config['broker']\\\n        broker = brokers[broker_name]\\\n        if strategy_type in STRATEGY_MAP:\\\n            strategies.append(STRATEGY_MAP[strategy_type](broker, strategy_config))\\\n        else:\\\n            raise ValueError(f"Unsupported strategy type: {strategy_type}")\\\n    return strategies\\\n