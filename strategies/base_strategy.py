from abc import ABC, abstractmethod\\nfrom database.models import Balance, CashBalance, PositionBalance\\n\\nclass BaseStrategy(ABC):\\n    def __init__(self, broker):\\n        self.broker = broker\\n        self.initialize_balances()\\n\\n    @abstractmethod\\n    def rebalance(self):\\n        pass\\n\\n    def initialize_balances(self):\\n        account_info = self.broker.get_account_info()\\n        buying_power = account_info.get('buying_power')\\n\\n        if buying_power < self.starting_capital:\\n            raise ValueError(\\"Not enough cash available to initialize the strategy with the desired starting capital.\\") \\n\\n        with self.broker.Session() as session:\\n            strategy_balance = session.query(Balance).filter_by(\\n                strategy=self.strategy_name,\\n                broker=self.broker.broker_name\\n            ).first()\\n            if strategy_balance is None:\\n                strategy_balance = Balance(\\n                    strategy=self.strategy_name,\\n                    broker=self.broker.broker_name,\\n                    total_balance=self.starting_capital\\n                ) \\n                session.add(strategy_balance) \\n                session.commit()\\n\\n            cash_balance = session.query(CashBalance).filter_by(\\n                strategy=self.strategy_name,\\n                broker=self.broker.broker_name\\n            ).first()\\n            if cash_balance is None:\\n                cash_balance = CashBalance(\\n                    strategy=self.strategy_name,\\n                    broker=self.broker.broker_name,\\n                    balance=self.starting_capital * (1 - self.cash_percentage)\\n                ) \\n                session.add(cash_balance) \\n                session.commit()\\n\\n            for position in self.broker.get_positions():\\n                position_balance = session.query(PositionBalance).filter_by(\\n                    strategy=self.strategy_name,\\n                    broker=self.broker.broker_name,\\n                    ticker=position\\n                ).first()\\n                if position_balance is None:\\n                    position_balance = PositionBalance(\\n                        strategy=self.strategy_name,\\n                        broker=self.broker.broker_name,\\n                        ticker=position,\\n                        balance=self.starting_capital * self.stock_allocations[position]\\n                    ) \\n                    session.add(position_balance) \\n                    session.commit()\\n