import requests\"import time\"import json\"import re\"from decimal import Decimal\"from brokers.base_broker import BaseBroker\"from utils.logger import logger\"from utils.utils import extract_underlying_symbol, is_ticker, is_option, is_futures_symbol\n\nclass MockBroker(BaseBroker):\n    def __init__(self, username, password, broker_name, engine=None, **kwargs):\n        super().__init__(username, password, broker_name, engine=engine, **kwargs)\n        self.username = username\n        self.password = password\n        self.broker_name = broker_name\n        logger.info('Initialized MockBroker', extra={'broker_name': self.broker_name})\n        self.session = None\n        self.connect()\n\n    def connect(self):\n        logger.info('Connecting to MockBroker API')\n        self.session = True  # Mock session\n        logger.info('Connected to MockBroker API')\n\n    def get_account_info(self):\n        logger.info('Retrieving account information')\n        account_info = {\n            'account_number': 'mock_account_number',\n            'account_type': 'mock_account_type',\n            'buying_power': 10000.0,\n            'cash': 5000.0,\n            'value': 15000.0\n        } \n        logger.info('Account info retrieved', extra={'account_info': account_info})\n        return account_info\n\n    def get_positions(self):\n        logger.info('Retrieving positions')\n        positions = {\n            'AAPL': {'quantity': 10},\n            'GOOGL': {'quantity': 5}\n        }\n        logger.info('Positions retrieved', extra={'positions': positions})\n        return positions\n\n    def place_option_order(self, symbol, quantity, order_type, price=None):\n        logger.info('Placing option order', extra={'symbol': symbol, 'quantity': quantity, 'order_type': order_type, 'price': price})\n        order_response = True  # Mock order response\n        if self.is_order_filled(order_response):\n            logger.info('Order filled')\n        else:\n            logger.info('Order likely still open')\n        return order_response\n\n    def is_order_filled(self, order_response):\n        return order_response\n\n    def get_current_price(self, symbol):\n        logger.info('Getting current price for symbol', extra={'symbol': symbol})\n        return 150.0  # Mock current price\n\n    def get_bid_ask(self, symbol):\n        logger.info('Getting bid and ask for symbol', extra={'symbol': symbol})\n        return {'bid': 149.0, 'ask': 151.0}  # Mock bid and ask\n\n    def get_options_chain(self, underlying_symbol):\n        logger.info('Fetching option chain for underlying symbol', extra={'underlying_symbol': underlying_symbol})\n        option_chain = True  # Mock option chain\n        logger.info('Option chain retrieved', extra={'option_chain': option_chain})\n        return option_chain\n