import pytest\nfrom unittest.mock import AsyncMock, patch, MagicMock, ANY\nfrom datetime import datetime, timezone\nfrom data.sync_worker import PositionService, BalanceService, BrokerService, _get_async_engine, _run_sync_worker_iteration, _fetch_and_update_positions, _reconcile_brokers_and_update_balances\nfrom database.models import Position, Balance\n\n# Mock data for testing\nMOCK_POSITIONS = [\n    Position(symbol='AAPL', broker='tradier', latest_price=0, last_updated=datetime.now(timezone.utc), underlying_volatility=None),\n    Position(symbol='GOOG', broker='tastytrade', latest_price=0, last_updated=datetime.now(timezone.utc), underlying_volatility=None),\n]\n\nMOCK_BALANCE = Balance(broker='tradier', strategy='RSI', type='cash', balance=10000.0, timestamp=datetime.now(timezone.utc))\n\n@pytest.mark.asyncio\nasync def test_update_position_prices_and_volatility():\n    # Mock the broker service\n    mock_broker_service = AsyncMock()\n    mock_broker_service.get_latest_price = AsyncMock(return_value=150.0)\n    mock_broker_service.get_cost_basis = MagicMock(return_value=100.0)\n\n    # Initialize PositionService with the mocked broker service\n    position_service = PositionService(mock_broker_service)\n\n    # Mock session and positions\n    mock_session = AsyncMock(spec=AsyncSession)\n    mock_positions = MOCK_POSITIONS\n\n    # Test the method\n    timestamp = datetime.now(timezone.utc)\n    await position_service.update_position_prices_and_volatility(mock_session, mock_positions, timestamp)\n\n    # Assert that the broker service was called to get the latest price for each position\n    mock_broker_service.get_latest_price.assert_any_call('tradier', 'AAPL')\n    mock_broker_service.get_latest_price.assert_any_call('tastytrade', 'GOOG')\n\n    # Assert that the broker service was called to get the cost basis for each position\n    for position in mock_positions:\n        mock_broker_service.get_cost_basis.assert_any_call(position.symbol)\n\n    # Assert that the session commit was called\n    assert mock_session.commit.called\n\n    # Additional assertions to match the gold code\n    mock_session.execute.assert_called()\n    mock_session.add.assert_called()\n