import unittest\nfrom unittest.mock import patch, MagicMock\nfrom brokers.etrade_broker import EtradeBroker\n\nclass TestEtradeBroker(unittest.TestCase):\n\n    def setUp(self):\n        self.broker = EtradeBroker('api_key', 'secret_key')\n\n    def mock_connect(self, mock_post):\n        mock_response = MagicMock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = {'data': {'session-token': 'token'}}\n        mock_post.return_value = mock_response\n\n    @patch('brokers.etrade_broker.requests.post') as mock_post:\n        def test_connect(self):\n            self.mock_connect(mock_post)\n            self.broker.connect()\n            self.assertTrue(hasattr(self.broker, 'auth'))\n\n    @patch('brokers.etrade_broker.requests.get') as mock_get:\n        @patch('brokers.etrade_broker.requests.post') as mock_post:\n            def test_get_account_info(self):\n                self.mock_connect(mock_post)\n                mock_response = MagicMock()\n                mock_response.json.return_value = {\n                    'accountListResponse': {'accounts': [{'accountId': '12345'}]}\n                }\n                mock_get.return_value = mock_response\n\n                self.broker.connect()\n                account_info = self.broker.get_account_info()\n                self.assertEqual(account_info, {\n                    'accountListResponse': {'accounts': [{'accountId': '12345'}]}\n                })\n                self.assertEqual(self.broker.account_id, '12345')\n\n    @patch('brokers.etrade_broker.requests.post') as mock_post_place_order:\n        @patch('brokers.etrade_broker.requests.get') as mock_get_account_info:\n            @patch('brokers.etrade_broker.requests.post') as mock_post_connect:\n                def test_place_order(self):\n                    self.mock_connect(mock_post_connect)\n                    mock_get_account_info.return_value = MagicMock(json=MagicMock(return_value={\n                        'accountListResponse': {'accounts': [{'accountId': '12345'}]}\n                    }))\\n                    mock_response = MagicMock()\\n                    mock_response.json.return_value = {'status': 'filled', 'filled_price': 155.00}\\n                    mock_post_place_order.side_effect = [mock_post_connect.return_value, mock_response]\\n\\n                    self.broker.connect()\\n                    self.broker.get_account_info()\\n                    order_info = self.broker.place_order('AAPL', 10, 'buy', 'example_strategy', 150.00)\n                    self.assertEqual(order_info, {'status': 'filled', 'filled_price': 155.00})\n\n    @patch('brokers.etrade_broker.requests.get') as mock_get:\n        @patch('brokers.etrade_broker.requests.post') as mock_post_connect:\n            def test_get_order_status(self):\n                self.mock_connect(mock_post_connect)\n                mock_response = MagicMock()\n                mock_response.json.return_value = {'status': 'completed'}\\n                mock_get.return_value = mock_response\n\\n                self.broker.connect()\\n                order_status = self.broker.get_order_status('order_id')\n                self.assertEqual(order_status, {'status': 'completed'})\\n\n    @patch('brokers.etrade_broker.requests.put') as mock_put:\n        @patch('brokers.etrade_broker.requests.post') as mock_post_connect:\n            def test_cancel_order(self):\n                self.mock_connect(mock_post_connect)\n                mock_response = MagicMock()\n                mock_response.json.return_value = {'status': 'cancelled'}\\n                mock_put.return_value = mock_response\n\\n                self.broker.connect()\\n                cancel_status = self.broker.cancel_order('order_id')\n                self.assertEqual(cancel_status, {'status': 'cancelled'})\\n\n    @patch('brokers.etrade_broker.requests.get') as mock_get:\n        @patch('brokers.etrade_broker.requests.post') as mock_post_connect:\n            def test_get_options_chain(self):\n                self.mock_connect(mock_post_connect)\n                mock_response = MagicMock()\n                mock_response.json.return_value = {'options': 'chain'}\\n                mock_get.return_value = mock_response\n\\n                self.broker.connect()\\n                options_chain = self.broker.get_options_chain('AAPL', '2024-12-20')\n                self.assertEqual(options_chain, {'options': 'chain'})\\n\nif __name__ == '__main__':\\n    unittest.main()\