import unittest\nfrom datetime import datetime\nfrom database.models import Trade, Balance\nfrom .base_test import BaseTest\nfrom brokers.base_broker import BaseBroker\nfrom unittest.mock import MagicMock\n\nclass MockBroker(BaseBroker):\n    def __init__(self, api_key, secret_key, broker_name, engine):\n        self.api_key = api_key\n        self.secret_key = secret_key\n        self.broker_name = broker_name\n        self.engine = engine\n\n    def connect(self):\n        pass\n\n    def _get_account_info(self):\n        return {'profile': {'account': {'account_number': '12345', 'value': 10000.0}}}\\\n\n    def _place_order(self, symbol, quantity, order_type, price=None):\n        return {'status': 'filled', 'filled_price': 150.0}\n\n    def _get_order_status(self, order_id):\n        return {'status': 'completed'}\n\n    def _cancel_order(self, order_id):\n        return {'status': 'cancelled'}\n\n    def _get_options_chain(self, symbol, expiration_date):\n        return {'options': 'chain'}\n\n    def get_current_price(self, symbol):\n        return 150.0\n\n    def execute_trade(self, session, trade_data):\n        trade = Trade(symbol=trade_data['symbol'], quantity=trade_data['quantity'], price=trade_data['price'], executed_price=trade_data['executed_price'], order_type=trade_data['order_type'], status=trade_data['status'], timestamp=trade_data['timestamp'], broker=trade_data['broker'], strategy=trade_data['strategy'], profit_loss=trade_data['profit_loss'], success=trade_data['success'])\n        session.add(trade)\n        session.commit()\n\n        balance = session.query(Balance).filter_by(broker=trade_data['broker'], strategy=trade_data['strategy']).first()\n        if balance:\n            balance.total_balance = balance.total_balance + trade_data['profit_loss'] if trade_data['order_type'] == 'buy' else balance.total_balance - trade_data['profit_loss']\n        else:\n            balance = Balance(broker=trade_data['broker'], strategy=trade_data['strategy'], total_balance=trade_data['profit_loss'] if trade_data['order_type'] == 'buy' else -trade_data['profit_loss'])\n            session.add(balance)\n        session.commit()\n\nclass TestTrading(BaseTest):\n    def setUp(self):\n        super().setUp()  # Call the setup from BaseTest\n        self.session = MagicMock()\n\n    def test_execute_trade(self):\n        trade_data = {\"symbol": 'AAPL',\n                      'quantity': 10,\n                      'price': 150.0,\n                      'executed_price': 151.0,\n                      'order_type': 'buy',\n                      'status': 'executed',\n                      'timestamp': datetime.utcnow(),\n                      'broker': 'E*TRADE',\n                      'strategy': 'SMA',\n                      'profit_loss': 10.0,\n                      'success': 'yes'}\n\n        broker = MockBroker('api_key', 'secret_key', 'E*TRADE', engine=self.engine)\n        broker.execute_trade(self.session, trade_data)\n\n        self.session.add.assert_called_once_with(Trade(symbol='AAPL', quantity=10, price=150.0, executed_price=151.0, order_type='buy', status='executed', timestamp=trade_data['timestamp'], broker='E*TRADE', strategy='SMA', profit_loss=10.0, success='yes'))\n        self.session.commit.assert_called_once()\n\n        balance = self.session.query.return_value.filter_by.return_value.first.return_value\n        self.assertIsNotNone(balance)\n        self.assertEqual(balance.total_balance, 1510.0)\n\nif __name__ == '__main__':\n    unittest.main()\n