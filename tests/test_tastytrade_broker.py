import unittest\\nfrom unittest.mock import patch, MagicMock\\nfrom brokers.tastytrade_broker import TastytradeBroker\\n\\nclass TestTastytradeBroker(unittest.TestCase):\\n\\n    @patch('brokers.tastytrade_broker.requests.post')\\n    def test_connect(self, mock_post):\\n        mock_response = MagicMock()\\n        mock_response.json.return_value = {'data': {'session-token': 'token'}}\\n        mock_post.return_value = mock_response\\n\\n        broker = TastytradeBroker('api_key', 'secret_key')\\n        broker.connect()\\n        self.assertTrue(hasattr(broker, 'session_token'))\\n\\n    @patch('brokers.tastytrade_broker.requests.get')\\n    def test_get_account_info(self, mock_get):\\n        mock_response = MagicMock()\\n        mock_response.json.return_value = {'data': {'items': [{'account': {'account_number': '12345'}}]}}]\\n        mock_get.return_value = mock_response\\n\\n        broker = TastytradeBroker('api_key', 'secret_key')\\n        broker.connect()\\n        account_info = broker.get_account_info()\\n        self.assertEqual(account_info, {'data': {'items': [{'account': {'account_number': '12345'}}]}})\n        self.assertEqual(broker.account_id, '12345')\\\n\\n    @patch('brokers.tastytrade_broker.requests.post')\\n    @patch('brokers.tastytrade_broker.TastytradeBroker.get_account_info')\\n    def test_place_order(self, mock_get_account_info, mock_post):\\n        mock_get_account_info.return_value = {'data': {'items': [{'account': {'account_number': '12345'}}]}}]\\n        mock_response = MagicMock()\\n        mock_response.json.return_value = {'status': 'filled'}\\\n        mock_post.return_value = mock_response\\n\\n        broker = TastytradeBroker('api_key', 'secret_key')\\n        broker.connect()\\n        broker.get_account_info()\\n        order_info = broker.place_order('AAPL', 10, 'buy', 'example_strategy', 150.00)\\\n        self.assertEqual(order_info, {'status': 'filled'})\\n\\n    @patch('brokers.tastytrade_broker.requests.get')\\n    def test_get_order_status(self, mock_get):\\n        mock_response = MagicMock()\\n        mock_response.json.return_value = {'status': 'completed'}\\\n        mock_get.return_value = mock_response\\n\\n        broker = TastytradeBroker('api_key', 'secret_key')\\n        broker.connect()\\n        order_status = broker.get_order_status('order_id')\\\n        self.assertEqual(order_status, {'status': 'completed'})\\n\\n    @patch('brokers.tastytrade_broker.requests.delete')\\n    def test_cancel_order(self, mock_delete):\\n        mock_response = MagicMock()\\n        mock_response.json.return_value = {'status': 'cancelled'}\\\n        mock_delete.return_value = mock_response\\n\\n        broker = TastytradeBroker('api_key', 'secret_key')\\n        broker.connect()\\n        cancel_status = broker.cancel_order('order_id')\\\n        self.assertEqual(cancel_status, {'status': 'cancelled'})\\n\\n    @patch('brokers.tastytrade_broker.requests.get')\\n    def test_get_options_chain(self, mock_get):\\n        mock_response = MagicMock()\\n        mock_response.json.return_value = {'options': 'chain'}\\\n        mock_get.return_value = mock_response\\n\\n        broker = TastytradeBroker('api_key', 'secret_key')\\n        broker.connect()\\n        options_chain = broker.get_options_chain('AAPL', '2024-12-20')\\\n        self.assertEqual(options_chain, {'options': 'chain'})\\n\\nif __name__ == '__main__':\\n    unittest.main()