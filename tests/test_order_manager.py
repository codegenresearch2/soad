import pytest\\\nfrom unittest.mock import AsyncMock, MagicMock, patch\\nfrom datetime import datetime, timedelta\\nfrom database.models import Trade\\nfrom order_manager.manager import OrderManager, MARK_ORDER_STALE_AFTER, PEGGED_ORDER_CANCEL_AFTER\\\"\n\n\n@pytest.fixture\\\"\ndef mock_db_manager():\\"\"Mock the DBManager.\"\"\\"\n    return AsyncMock()\\"\n\n\n@pytest.fixture\\\"\ndef mock_broker():\\"\"Mock a broker.\"\"\\"\n    broker = AsyncMock()\\"\n    broker.is_order_filled.return_value = False\\"\n    broker.update_positions.return_value = None\\"\n    return broker\\"\n\n\n@pytest.fixture\\\"\ndef order_manager(mock_db_manager, mock_broker):\\"\"Create an instance of OrderManager with mocked dependencies.\"\"\\"\n    engine = MagicMock()\\"\n    brokers = {\"dummy_broker\": mock_broker}\\"\n    order_manager = OrderManager(engine, brokers)\\"\n    order_manager.db_manager = mock_db_manager\\"\n    return order_manager\\"\n\n\n@pytest.mark.asyncio\\\"\nasync def test_reconcile_orders(order_manager, mock_db_manager):\\"\"Test the reconcile_orders method.\"\"\\"\n    # Mock trades\\"\n    trades = [\\"\n        Trade(id=1, broker='dummy_broker', broker_id='123', status='open'),\\"\n        Trade(id=2, broker='dummy_broker', broker_id='456', status='open'),\\"\n    ]\\"\n    order_manager.reconcile_order = AsyncMock()\\"\n\n    await order_manager.reconcile_orders(trades)\\"\n    # Verify that reconcile_order is called for each trade\\"\n    order_manager.reconcile_order.assert_any_call(trades[0])\\"\n    order_manager.reconcile_order.assert_any_call(trades[1])\\"\n    assert order_manager.reconcile_order.call_count == len(trades)\\"