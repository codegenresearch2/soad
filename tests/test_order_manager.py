import pytest\nimport pytest_asyncio\nfrom unittest.mock import AsyncMock, MagicMock, patch\nfrom datetime import datetime, timedelta\nfrom database.models import Trade\nfrom order_manager.manager import OrderManager\n\nMARK_ORDER_STALE_AFTER = 60 * 60 * 24 * 2 # 2 days\nPEGGED_ORDER_CANCEL_AFTER = 15 # 15 seconds\n\n@pytest_asyncio.fixture\ndef mock_db_manager():\n    \"\"\"Mock the DBManager.\"\"\"\n    return AsyncMock()\n\n@pytest_asyncio.fixture\ndef mock_broker():\n    \"\"\"Mock a broker.\"\"\"\n    broker = AsyncMock()\n    broker.is_order_filled = AsyncMock(return_value=False)\n    broker.update_positions = AsyncMock(return_value=None)\n    return broker\n\n@pytest_asyncio.fixture\ndef order_manager(mock_db_manager, mock_broker):\n    \"\"\"Create an instance of OrderManager with mocked dependencies.\"\"\"\n    engine = MagicMock()\n    brokers = {\