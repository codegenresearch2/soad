import pytest\nimport pytest_asyncio\nfrom unittest.mock import AsyncMock, MagicMock, patch\nfrom datetime import datetime, timedelta\nfrom database.models import Trade\nfrom order_manager.manager import OrderManager, MARK_ORDER_STALE_AFTER, PEGGED_ORDER_CANCEL_AFTER\n\n\n@pytest_asyncio.fixture\ndef mock_db_manager():\n    """Mock the DBManager.\"""\n    return AsyncMock()\n\n\n@pytest_asyncio.fixture\ndef mock_broker():\n    """Mock a broker.\"""\n    broker = AsyncMock()\n    broker.is_order_filled.return_value = False\n    broker.update_positions.return_value = None\n    return broker\n\n\n@pytest_asyncio.fixture\ndef order_manager(mock_db_manager, mock_broker):\n    """Create an instance of OrderManager with mocked dependencies.\"""\n    engine = MagicMock()\n    brokers = {"dummy_broker": mock_broker}\n    order_manager = OrderManager(engine, brokers)\n    order_manager.db_manager = mock_db_manager\n    return order_manager\n\n\n@pytest.mark.asyncio\nasync def test_reconcile_orders(order_manager, mock_db_manager):\n    """Test the reconcile_orders method.\"""\n    # Mock trades\n    trades = [\n        Trade(id=1, broker="dummy_broker", broker_id="123", status="open"),\n        Trade(id=2, broker="dummy_broker", broker_id="456", status="open"),\n    ]\n    order_manager.reconcile_order = AsyncMock()\n\n    await order_manager.reconcile_orders(trades)\n\n    # Verify that reconcile_order is called for each trade\n    order_manager.reconcile_order.assert_any_call(trades[0])\n    order_manager.reconcile_order.assert_any_call(trades[1])\n    assert order_manager.reconcile_order.call_count == len(trades)\n\n\n@pytest.mark.asyncio\nasync def test_reconcile_order_stale(order_manager, mock_db_manager, mock_broker):\n    """Test the reconcile_order method for stale orders.\"""\n    stale_order = Trade(\n        id=1,\n        broker="dummy_broker",\n        broker_id=None,\n        timestamp=datetime.utcnow() - timedelta(days=3),\n        status="open",\n    )\n\n    await order_manager.reconcile_order(stale_order)\n\n    # Verify that the order is marked as stale\n    mock_db_manager.update_trade_status.assert_called_once_with(1, "stale")\n    mock_broker.is_order_filled.assert_not_called()\n    mock_broker.update_positions.assert_not_called()\n\n\n# TODO: Fix\n@pytest.mark.skip\n@pytest.mark.asyncio\nasync def test_reconcile_order_filled(order_manager, mock_db_manager, mock_broker):\n    """Test the reconcile_order method for filled orders.\"""\n    filled_order = Trade(\n        id=1,\n        broker="dummy_broker",\n        broker_id="123",\n        timestamp=datetime.utcnow(),\n        status="open",\n    )\n    mock_broker.is_order_filled.return_value = True\n\n    await order_manager.reconcile_order(filled_order)\n\n    # Verify that the order is marked as filled and positions are updated\n    mock_db_manager.set_trade_filled.assert_called_once_with(1)\n    mock_broker.update_positions.assert_called_once_with(filled_order, mock_db_manager.Session().__aenter__.return_value)\n\n\n@pytest.mark.asyncio\nasync def test_reconcile_order_not_filled(order_manager, mock_db_manager, mock_broker):\n    """Test the reconcile_order method for orders that are not filled.\"""\n    unfilled_order = Trade(\n        id=1,\n        broker="dummy_broker",\n        broker_id="123",\n        timestamp=datetime.utcnow(),\n        status="open",\n    )\n    mock_broker.is_order_filled.return_value = False\n\n    await order_manager.reconcile_order(unfilled_order)\n\n    # Verify that no changes are made for unfilled orders\n    mock_db_manager.set_trade_filled.assert_not_called()\n    mock_broker.update_positions.assert_not_called()\n\n\n@pytest.mark.asyncio\nasync def test_run(order_manager, mock_db_manager):\n    """Test the run method.\"""\n    trades = [\n        Trade(id=1, broker="dummy_broker", broker_id="123", status="open"),\n        Trade(id=2, broker="dummy_broker", broker_id="456", status="open"),\n    ]\n    mock_db_manager.get_open_trades.return_value = trades\n    order_manager.reconcile_orders = AsyncMock()\n\n    await order_manager.run()\n\n    # Verify that open trades are fetched and reconciled\n    mock_db_manager.get_open_trades.assert_called_once()\n    order_manager.reconcile_orders.assert_called_once_with(trades)\n