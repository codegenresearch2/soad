import pytest\nimport pytest_asyncio\nfrom unittest.mock import AsyncMock, MagicMock, patch\nfrom datetime import datetime, timedelta\nfrom database.models import Trade\nfrom order_manager.manager import OrderManager\n\n@pytest_asyncio.fixture\ndef mock_db_manager():\n    """Mock the DBManager."""\n    return AsyncMock()\n\n@pytest_asyncio.fixture\ndef mock_broker():\n    """Mock a broker."""\n    broker = AsyncMock()\n    broker.is_order_filled = AsyncMock(return_value=False)\n    broker.update_positions = AsyncMock(return_value=None)\n    return broker\n\n@pytest_asyncio.fixture\ndef order_manager(mock_db_manager, mock_broker):\n    """Create an instance of OrderManager with mocked dependencies."""\n    engine = MagicMock()\n    brokers = {"dummy_broker": mock_broker}\n    order_manager = OrderManager(engine, brokers)\n    order_manager.db_manager = mock_db_manager\n    return order_manager\n\n@pytest.mark.asyncio\nasync def test_reconcile_orders(order_manager, mock_db_manager):\n    """Test the reconcile_orders method."""\n    # Mock trades\n    trades = [\n        Trade(id=1, broker=\"dummy_broker\", broker_id=\"123\", status=\"open\"),\n        Trade(id=2, broker=\"dummy_broker\", broker_id=\"456\", status=\"open\")\n    ]\n    order_manager.reconcile_order = AsyncMock()\n\n    await order_manager.reconcile_orders(trades)\n\n    # Verify that reconcile_order is called for each trade\n    order_manager.reconcile_order.assert_any_call(trades[0])\n    order_manager.reconcile_order.assert_any_call(trades[1])\n    assert order_manager.reconcile_order.call_count == len(trades)\n