import unittest\nfrom unittest.mock import patch, MagicMock\nfrom brokers.tradier_broker import TradierBroker\n\nclass TestTradierBroker(unittest.TestCase):\n\n    def setUp(self):\n        self.broker = TradierBroker('api_key', 'secret_key')\n\n    def mock_connect(self, mock_post):\n        mock_response = MagicMock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = {'data': {'session-token': 'token'}}\n        mock_post.return_value = mock_response\n\n    @patch('brokers.tradier_broker.requests.post') as mock_post:\n        def test_connect(self, mock_post):\n            self.mock_connect(mock_post)\n            self.broker.connect()\n            self.assertTrue(hasattr(self.broker, 'headers'))\n\n    @patch('brokers.tradier_broker.requests.get') as mock_get,\n           @patch('brokers.tradier_broker.requests.post') as mock_post:\n        def test_get_account_info(self, mock_post, mock_get):\n            self.mock_connect(mock_post)\n            mock_response = MagicMock()\n            mock_response.json.return_value = {'profile': {'account': {'account_number': '12345'}}}\\\n            mock_get.return_value = mock_response\n\n            self.broker.connect()\n            account_info = self.broker.get_account_info()\n            self.assertEqual(account_info, {'profile': {'account': {'account_number': '12345'}}})\n            self.assertEqual(self.broker.account_id, '12345')\n\n    @patch('brokers.tradier_broker.requests.post') as mock_post_place_order,\n           @patch('brokers.tradier_broker.requests.get') as mock_get_account_info,\n           @patch('brokers.tradier_broker.requests.post') as mock_post_connect:\n        def test_place_order(self, mock_post_place_order, mock_get_account_info, mock_post_connect):\n            self.mock_connect(mock_post_connect)\n            mock_get_account_info.return_value = MagicMock(json=MagicMock(return_value={\n                'profile': {'account': {'account_number': '12345'}}\n            }))\n            mock_response = MagicMock()\n            mock_response.json.return_value = {'status': 'filled', 'filled_price': 155.00}\\\\\n            mock_post_place_order.side_effect = [mock_post_connect.return_value, mock_response]\n\n            self.broker.connect()\n            self.broker.get_account_info()\n            order_info = self.broker.place_order('AAPL', 10, 'buy', 'example_strategy', 150.00)\n            self.assertEqual(order_info, {'status': 'filled', 'filled_price': 155.00})\n\n    @patch('brokers.tradier_broker.requests.get') as mock_get,\n           @patch('brokers.tradier_broker.requests.post') as mock_post_connect:\n        def test_get_order_status(self, mock_post_connect, mock_get):\n            self.mock_connect(mock_post_connect)\n            mock_response = MagicMock()\n            mock_response.json.return_value = {'status': 'completed'}\\\n            mock_get.return_value = mock_response\n\n            self.broker.connect()\n            order_status = self.broker.get_order_status('order_id')\n            self.assertEqual(order_status, {'status': 'completed'})\n\n    @patch('brokers.tradier_broker.requests.delete') as mock_delete,\n           @patch('brokers.tradier_broker.requests.post') as mock_post_connect:\n        def test_cancel_order(self, mock_post_connect, mock_delete):\n            self.mock_connect(mock_post_connect)\n            mock_response = MagicMock()\n            mock_response.json.return_value = {'status': 'cancelled'}\\\n            mock_delete.return_value = mock_response\n\n            self.broker.connect()\n            cancel_status = self.broker.cancel_order('order_id')\n            self.assertEqual(cancel_status, {'status': 'cancelled'})\n\n    @patch('brokers.tradier_broker.requests.get') as mock_get,\n           @patch('brokers.tradier_broker.requests.post') as mock_post_connect:\n        def test_get_options_chain(self, mock_post_connect, mock_get):\n            self.mock_connect(mock_post_connect)\n            mock_response = MagicMock()\n            mock_response.json.return_value = {'options': 'chain'}\\\n            mock_get.return_value = mock_response\n\n            self.broker.connect()\n            options_chain = self.broker.get_options_chain('AAPL', '2024-12-20')\n            self.assertEqual(options_chain, {'options': 'chain'})\n\nif __name__ == '__main__':\n    unittest.main()\n