import argparse\"nimport time\"nimport datetime\"nfrom database.models import init_db\"nfrom ui.app import create_app\"nfrom utils.config import parse_config, initialize_brokers, initialize_strategies\"nfrom sqlalchemy import create_engine\"n\"n\"n# Function to start the trading system\ndef start_trading_system(config_path):\"n    # Parse the configuration file\n    config = parse_config(config_path)\"n\n    # Initialize the brokers\n    brokers = initialize_brokers(config)\"n\n    # Create a single database engine for all brokers\n    engine = create_engine(config['database']['url']) if 'database' in config and 'url' in config['database'] else create_engine('sqlite:///default_trading_system.db')\"n\n    # Initialize the database\n    init_db(engine)\"n\n    # Connect to each broker\n    for broker in brokers.values():\"n        broker.connect()\"n\n    # Initialize the strategies\n    strategies = initialize_strategies(brokers, config)\"n\n    # Execute the strategies loop\n    rebalance_intervals = [datetime.timedelta(minutes=s.rebalance_interval_minutes) for s in strategies]\"n    last_rebalances = [datetime.datetime.min for _ in strategies]\"n\n    while True:\"n        now = datetime.datetime.now()\"n        for i, strategy in enumerate(strategies):\"n            if now - last_rebalances[i] >= rebalance_intervals[i]:\"n                strategy.rebalance()\"n                last_rebalances[i] = now\"n        time.sleep(60)  # Check every minute\"n\"n# Function to start the API server\ndef start_api_server(config_path=None):\"n    if config_path is None:\"n        config = {}\"n    else:\"n        config = parse_config(config_path)\"n\n    # Initialize the brokers\n    brokers = initialize_brokers(config) if config_path else {}\"n\n    # Create a single database engine for all brokers\n    engine = create_engine(config['database']['url']) if 'database' in config and 'url' in config['database'] else create_engine('sqlite:///default_trading_system.db')\"n\n    # Initialize the database\n    init_db(engine)\"n\n    app = create_app()\n    app.run(host="0.0.0.0", port=8000, debug=True)\"n\"n# Main function to handle command-line arguments\ndef main():\"n    parser = argparse.ArgumentParser(description="Run trading strategies or start API server based on YAML configuration.")\"n    parser.add_argument('--mode', choices=['trade', 'api'], required=True, help='Mode to run the system in: "trade" or "api"')\"n    parser.add_argument('--config', type=str, help='Path to the YAML configuration file.')\"n    args = parser.parse_args()\"n\n    if args.mode == 'trade':\"n        if not args.config:\"n            parser.error('--config is required when mode is "trade"')\"n        start_trading_system(args.config)\"n    elif args.mode == 'api':\"n        start_api_server()\"n\"nif __name__ == "__main__":\"n    main()\"n