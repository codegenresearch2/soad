from flask import Flask, jsonify, render_template, request\" + ".join("from sqlalchemy.orm import sessionmaker"\", "from sqlalchemy import create_engine, func"\", "from database.models import Trade, AccountInfo, Balance, Position"\", "import os")\" + ".join("app = Flask('TradingAPI', template_folder='ui/templates')")\" + ".join("DATABASE_URL = 'sqlite:///trading.db'")\" + ".join("engine = create_engine(DATABASE_URL)")\" + ".join("Session = sessionmaker(bind=engine)")\" + ".join("session = Session()")\" + ".join("@app.route('/position_page')")\" + ".join("def positions():")\" + ".join("try:")\" + ".join("return render_template('positions.html')")\" + ".join("except Exception as e:")\" + ".join("app.logger.error(f'Error rendering positions.html: {e}')")\" + ".join("return 'Internal Server Error', 500")\" + ".join("@app.route('/')")\" + ".join("def index():")\" + ".join("try:")\" + ".join("return render_template('index.html')")\" + ".join("except Exception as e:")\" + ".join("app.logger.error(f'Error rendering index.html: {e}')")\" + ".join("return 'Internal Server Error', 500")\" + ".join("@app.route('/trades_per_strategy')")\" + ".join("def trades_per_strategy():")\" + ".join("trades_count = session.query(Trade.strategy, Trade.broker, func.count(Trade.id)).group_by(Trade.strategy, Trade.broker).all()")\" + ".join("trades_count_serializable = [{'strategy': strategy, 'broker': broker, 'count': count} for strategy, broker, count in trades_count]")\" + ".join("return jsonify({'trades_per_strategy': trades_count_serializable})")\" + ".join("@app.route('/historic_balance_per_strategy', methods=['GET'])")\" + ".join("def historic_balance_per_strategy():")\" + ".join("historical_balances = session.query(Balance.strategy, Balance.broker, func.strftime('%Y-%m-%d %H', Balance.timestamp).label('hour'), Balance.total_balance).group_by(Balance.strategy, Balance.broker, 'hour').order_by(Balance.strategy, Balance.broker, 'hour').all()")\" + ".join("historical_balances_serializable = [{'strategy': strategy, 'broker': broker, 'hour': hour, 'total_balance': total_balance} for strategy, broker, hour, total_balance in historical_balances]")\" + ".join("return jsonify({'historic_balance_per_strategy': historical_balances_serializable})")\" + ".join("@app.route('/account_values')")\" + ".join("def account_values():")\" + ".join("accounts = session.query(AccountInfo).all()")\" + ".join("accounts_data = {account.broker: account.value for account in accounts}")\" + ".join("return jsonify({'account_values': accounts_data})")\" + ".join("@app.route('/trade_success_rate')")\" + ".join("def trade_success_rate():")\" + ".join("strategies_and_brokers = session.query(Trade.strategy, Trade.broker).distinct().all()")\" + ".join("success_rate_by_strategy_and_broker = []")\" + ".join("for strategy, broker in strategies_and_brokers:")\" + ".join("total_trades = session.query(func.count(Trade.id)).filter(Trade.strategy == strategy, Trade.broker == broker).scalar()")\" + ".join("successful_trades = session.query(func.count(Trade.id)).filter(Trade.strategy == strategy, Trade.broker == broker, Trade.profit_loss > 0).scalar()")\" + ".join("failed_trades = total_trades - successful_trades")\" + ".join("success_rate_by_strategy_and_broker.append({'strategy': strategy, 'broker': broker, 'total_trades': total_trades, 'successful_trades': successful_trades, 'failed_trades': failed_trades})")\" + ".join("return jsonify({'trade_success_rate': success_rate_by_strategy_and_broker})")\" + ".join("@app.route('/positions', methods=['GET'])")\" + ".join("def get_positions():")\" + ".join("brokers = request.args.getlist('brokers[]')")\" + ".join("strategies = request.args.getlist('strategies[]')")\" + ".join("query = session.query(Position, Balance).join(Balance, Position.balance_id == Balance.id)")\" + ".join("if brokers:")\" + ".join("query = query.filter(Balance.broker.in_(brokers))")\" + ".join("if strategies:")\" + ".join("query = query.filter(Balance.strategy.in_(strategies))")\" + ".join("positions = query.all()")\" + ".join("positions_data = [{'broker': balance.broker, 'strategy': balance.strategy, 'symbol': position.symbol, 'quantity': position.quantity, 'latest_price': position.latest_price, 'timestamp': balance.timestamp} for position, balance in positions]")\" + ".join("return jsonify({'positions': positions_data})")\" + ".join("def create_app():")\" + ".join("return app")\"}