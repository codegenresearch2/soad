from flask import Flask, jsonify, render_template, request\\nfrom sqlalchemy.orm import sessionmaker\\nfrom sqlalchemy import create_engine, func\\nfrom database.models import Trade, AccountInfo, Balance, Position, Base\\nimport os\\\n\\\napp = Flask('TradingAPI', template_folder='ui/templates')\\\n\\\n@app.route('/position_page')\\\\\ndef positions():\\n    try:\\n        return render_template('positions.html')\\n    except Exception as e:\\n        app.logger.error(f'Error rendering positions.html: {e}')\\n        return 'Internal Server Error', 500\\\n\\\n@app.route('/')\\\ndef index():\\n    try:\\n        return render_template('index.html')\\n    except Exception as e:\\n        app.logger.error(f'Error rendering index.html: {e}')\\n        return 'Internal Server Error', 500\\\n\\\n# Static files are served automatically from the 'static' folder\\\n@app.route('/trades_per_strategy')\\\ndef trades_per_strategy():\\n    trades_count = app.session.query(Trade.strategy, Trade.broker, func.count(Trade.id)).group_by(Trade.strategy, Trade.broker).all()\\n    trades_count_serializable = [{'strategy': strategy, 'broker': broker, 'count': count} for strategy, broker, count in trades_count]\\n    return jsonify({'trades_per_strategy': trades_count_serializable})\\\n\\\n@app.route('/historic_balance_per_strategy', methods=['GET'])\\\ndef historic_balance_per_strategy():\\n    try:\\n        historical_balances = app.session.query(\\n            Balance.strategy,\\n            Balance.broker,\\n            func.strftime('%Y-%m-%d %H', Balance.timestamp).label('hour'),\\n            Balance.total_balance,\\n        ).group_by(\\n            Balance.strategy, Balance.broker, 'hour'\\n        ).order_by(\\n            Balance.strategy, Balance.broker, 'hour'\\n        ).all()\\n        historical_balances_serializable = []\\n        for strategy, broker, hour, total_balance in historical_balances:\\n            historical_balances_serializable.append({\\n                'strategy': strategy,\\n                'broker': broker,\\n                'hour': hour,\\n                'total_balance': total_balance\\n            })\\n        return jsonify({'historic_balance_per_strategy': historical_balances_serializable})\\n    finally:\\n        app.session.close()\\\n\\\n@app.route('/account_values')\\\ndef account_values():\\n    accounts = app.session.query(AccountInfo).all()\\n    accounts_data = {account.broker: account.value for account in accounts}\\n    return jsonify({'account_values': accounts_data})\\\n\\\n@app.route('/trade_success_rate')\\\ndef trade_success_rate():\\n    strategies_and_brokers = app.session.query(Trade.strategy, Trade.broker).distinct().all()\\n    success_rate_by_strategy_and_broker = []\\n\\\n    for strategy, broker in strategies_and_brokers:\\n        total_trades = app.session.query(func.count(Trade.id)).filter(Trade.strategy == strategy, Trade.broker == broker).scalar()\\n        successful_trades = app.session.query(func.count(Trade.id)).filter(Trade.strategy == strategy, Trade.broker == broker, Trade.profit_loss > 0).scalar()\\n        failed_trades = total_trades - successful_trades\\n\\\n        success_rate_by_strategy_and_broker.append({\\n            'strategy': strategy,\\n            'broker': broker,\\n            'total_trades': total_trades,\\n            'successful_trades': successful_trades,\\n            'failed_trades': failed_trades\\n        })\\n\\\n    return jsonify({'trade_success_rate': success_rate_by_strategy_and_broker})\\\n\\\n@app.route('/positions', methods=['GET'])\\\ndef get_positions():\\n    brokers = request.args.getlist('brokers[]')\\n    strategies = request.args.getlist('strategies[]')\\n\\\n    query = app.session.query(Position, Balance).join(Balance, Position.balance_id == Balance.id)\\n\\\n    if brokers:\\n        query = query.filter(Balance.broker.in_(brokers))\\n    if strategies:\\n        query = query.filter(Balance.strategy.in_(strategies))\\n\\\n    positions = query.all()\\n    positions_data = []\\n    for position, balance in positions:\\n        positions_data.append({\\n            'broker': balance.broker,\\n            'strategy': balance.strategy,\\n            'symbol': position.symbol,\\n            'quantity': position.quantity,\\n            'latest_price': position.latest_price,\\n            'timestamp': balance.timestamp\\n        })\\n\\\n    return jsonify({'positions': positions_data})\\\n\\\ndef create_app(engine):\\n    Session = sessionmaker(bind=engine)\\n    app.session = Session()\\n    return app\\\n