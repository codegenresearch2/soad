from sqlalchemy import Column, Integer, String, Float, DateTime, create_engine, ForeignKey\\nfrom sqlalchemy.ext.declarative import declarative_base\\nfrom sqlalchemy.orm import sessionmaker, relationship\\nfrom datetime import datetime\\n\\\nBase = declarative_base()\\\n\\\nclass Trade(Base):\\\n    __tablename__ = 'trades'\\\n    \\\nid = Column(Integer, primary_key=True) \\\nsymbol = Column(String, nullable=False) \\\nquantity = Column(Integer, nullable=False) \\\nprice = Column(Float, nullable=False) \\\nexecuted_price = Column(Float, nullable=True) \\\norder_type = Column(String, nullable=False) \\\nstatus = Column(String, nullable=False) \\\ntimestamp = Column(DateTime, nullable=False, default=datetime.utcnow) \\\nbroker = Column(String, nullable=False) \\\nstrategy = Column(String, nullable=False) \\\nprofit_loss = Column(Float, nullable=True) \\\nsuccess = Column(String, nullable=True) \\\nbalance_id = Column(Integer, ForeignKey('balances.id'))\\\n\\\nclass AccountInfo(Base):\\\n    __tablename__ = 'account_info'\\\n    id = Column(Integer, primary_key=True, autoincrement=True) \\\n    broker = Column(String, unique=True) \\\n    value = Column(Float) \\\\n\\\nclass Balance(Base):\\\n    __tablename__ = 'balances'\\\n    id = Column(Integer, primary_key=True, autoincrement=True) \\\n    broker = Column(String) \\\n    strategy = Column(String) \\\n    initial_balance = Column(Float, default=0.0) \\\ntotal_balance = Column(Float, default=0.0) \\\ntimestamp = Column(DateTime, nullable=False, default=datetime.utcnow) \\\ntrades = relationship('Trade', backref='balance') \\\npositions = relationship('Position', back_populates='balance') \\\\n\\\nclass Position(Base):\\\n    __tablename__ = 'positions'\\\n\\\nid = Column(Integer, primary_key=True, autoincrement=True) \\\nbalance_id = Column(Integer, ForeignKey('balances.id'), nullable=False) \\\nsymbol = Column(String, nullable=False) \\\nquantity = Column(Float, nullable=False) \\\nlatest_price = Column(Float, nullable=False) \\\n\\\nbalance = relationship('Balance', back_populates='positions') \\\\n\\\ndef drop_then_init_db(engine): \\\n    Base.metadata.drop_all(engine)  # Drop existing tables \\\n    Base.metadata.create_all(engine)  # Create new tables \\\\n\\\ndef init_db(engine): \\\n    Base.metadata.create_all(engine)  # Create new tables