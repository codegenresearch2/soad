from sqlalchemy import Column, Integer, String, Float, DateTime, create_engine, ForeignKey, PrimaryKeyConstraint\\nfrom sqlalchemy.ext.declarative import declarative_base\\\\\nBase = declarative_base()\\\\\n\\\nclass Trade(Base):\\\\\n    __tablename__ = 'trades'\\\\\n    id = Column(Integer, primary_key=True)\\\\\n    symbol = Column(String, nullable=False)\\\\\n    quantity = Column(Integer, nullable=False)\\\\\n    price = Column(Float, nullable=False)\\\\\n    executed_price = Column(Float, nullable=True)\\\\\n    order_type = Column(String, nullable=False)\\\\\n    status = Column(String, nullable=False)\\\\\n    timestamp = Column(DateTime, nullable=False, default=datetime.utcnow)\\\\\n    broker = Column(String, nullable=False)\\\\\n    strategy = Column(String, nullable=False)\\\\\n    profit_loss = Column(Float, nullable=True)\\\\\n    success = Column(String, nullable=True)\\\\\n    balance_id = Column(Integer, ForeignKey('balances.id'))\\\\\n\\\nclass AccountInfo(Base):\\\\\n    __tablename__ = 'account_info'\\\\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\\\\n    broker = Column(String, unique=True)\\\\\n    value = Column(Float)\\\\\n\\\nclass Balance(Base):\\\\\n    __tablename__ = 'balances'\\\\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\\\\n    broker = Column(String, nullable=False)\\\\\n    strategy = Column(String, nullable=False)\\\\\n    initial_balance = Column(Float, default=0.0)\\\\\n    total_balance = Column(Float, default=0.0)\\\\\n    timestamp = Column(DateTime, nullable=False, default=datetime.utcnow)\\\\\n    type = Column(String, nullable=False)\\\\\n    trades = relationship('Trade', backref='balance')\\\\\n    positions = relationship('Position', back_populates='balance')\\\\\n    __table_args__ = (PrimaryKeyConstraint('id', 'broker', 'strategy'),)\\