from database.db_manager import DBManager\\\\\\nfrom utils.logger import logger\\\\\nfrom datetime import datetime, timedelta\\\\\nfrom sqlalchemy import select\\\\\nfrom database.models import Position, Trade\\\\\\n\\\\nMARK_ORDER_STALE_AFTER = 60 * 60 * 24 * 2 # 2 days\\\\\\nPEGGED_ORDER_CANCEL_AFTER = 15 # 15 seconds\\\\\\n\\\\nclass OrderManager:\\\\\n    def __init__(self, engine, brokers):\\\\\\n        logger.info('Initializing OrderManager')\\\\\\n        self.engine = engine\\\\\\n        self.db_manager = DBManager(engine)\\\\\\n        self.brokers = brokers\\\\\\n\\\\n    async def reconcile_orders(self, orders):\\\\\\n        logger.info('Reconciling orders', extra={'orders': orders})\\\\\\n        for order in orders:\\\\\\n            await self.reconcile_order(order)\\\\\\n        # Commit the transaction\\\\\\n\\\\n    async def reconcile_order(self, order):\\\\\\n        logger.info(f'Reconciling order {order.id}', extra={\\\\\\"order_id": order.id,\\\\\\\